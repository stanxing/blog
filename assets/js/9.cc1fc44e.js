(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{188:function(e,a,s){e.exports=s.p+"assets/img/awk_1.d904de8c.png"},229:function(e,a,s){"use strict";s.r(a);var t=s(6),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"linux-常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linux-常用命令"}},[e._v("#")]),e._v(" linux 常用命令")]),e._v(" "),t("p",[e._v("本文总结或收集了一些 linux 常用命令的具体用法介绍，供忘记的时候做个参考。")]),e._v(" "),t("h2",{attrs:{id:"awk"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#awk"}},[e._v("#")]),e._v(" AWK")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://github.com/mylxsw/growing-up/blob/master/doc/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9AAWK.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("三十分钟学会AWK"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("补充说明：")]),e._v(" "),t("ul",[t("li",[e._v("如果 awk 中指定了多个文件，"),t("code",[e._v("NR")]),e._v(" 变量会把第二个文件的行号从第一个文件的行号末尾开始计数；而 "),t("code",[e._v("FNR")]),e._v(" 变量会独立计算每个文件的行号，彼此不受影响。(在 ubuntu 16.04 下的测试结果)"),t("br"),e._v(" "),t("img",{attrs:{src:s(188),alt:"awk_NR_FNR"}})]),e._v(" "),t("li",[e._v("语句之间要加分号，例如：")])]),e._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 注意 if else 之间的分号，如果没有会报语法错误")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("awk")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('\'BEGIN{a=10; b = 20; if (a == b) print "a == b"; else print "a != b"}\'')]),e._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!=")]),e._v(" b\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("ul",[t("li",[e._v("awk 的字符串连接符是空格，不是加号：")])]),e._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("awk")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('\'BEGIN { str1 = "Hello, "; str2 = "World"; str3 = str1 str2; print str3 }\'')]),e._v("\nHello, World\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("ul",[t("li",[e._v("awk 的数组中如果没有定义某个下标的元素，则序号不会被打印：")])]),e._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("➜ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("awk")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'BEGIN{arr[0]=1; arr[2]=10; for (i in arr) printf \"arr[%d]: %d"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("\", i, arr[i]}'")]),e._v("\narr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\narr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])])])]),e._v(" "),t("h2",{attrs:{id:"sed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sed"}},[e._v("#")]),e._v(" SED")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/mylxsw/growing-up/blob/master/doc/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9ASED.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("三十分钟学会SED"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"jq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jq"}},[e._v("#")]),e._v(" JQ")]),e._v(" "),t("h2",{attrs:{id:"free"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#free"}},[e._v("#")]),e._v(" FREE")]),e._v(" "),t("p",[e._v("free 的用法特别简单，重要的是能理解 free 的参数含义。以下列输出结果为例（Ubbuntu 16.04 16G 内存）：")]),e._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("➜ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("free")]),e._v(" -w\n              total        used        "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("free")]),e._v("      shared     buffers       cache   available\nMem:       "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("16135472")]),e._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2636952")]),e._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("11205340")]),e._v("      "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("166372")]),e._v("      "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("305916")]),e._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1987264")]),e._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("12931996")]),e._v("\nSwap:       "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8389628")]),e._v("           "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8389628")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("其各个字段含义如下（参考 man free 的解释和一些文档）：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("total")]),e._v(": 系统可用的总内存，除去了 kernel 在启动时为自己保留的一小部分内存，因此会略小于实际内存")]),e._v(" "),t("li",[t("code",[e._v("used")]),e._v(": 已被操作系统使用的内存，计算方式为 total - free - buffers - cache")]),e._v(" "),t("li",[t("code",[e._v("free")]),e._v(": 未被操作系统使用的内存，从 /proc/meminfo 中的 MemFree 字段获取")]),e._v(" "),t("li",[t("code",[e._v("shared")]),e._v(": 共享内存，大部分是被 tmpfs 文件系统使用的内存，取自 /proc/meminfo 中的 Shmem")]),e._v(" "),t("li",[t("code",[e._v("buffers/cache")]),e._v(": buffers + cache\n"),t("ul",[t("li",[t("code",[e._v("buffers")]),e._v(": 被内核缓冲区使用的内存（kernel buffers），")]),e._v(" "),t("li",[t("code",[e._v("cache")]),e._v(": 被 page cache 和 slabs 使用的内存，取自 /proc/meminfo 中的 Cached + Slab")])])]),e._v(" "),t("li",[t("code",[e._v("available")]),e._v(": 模拟当启动一个新的应用程序时，在不发生内存交换的情况下有多少内存可供使用。不像 "),t("code",[e._v("cache")]),e._v(" 或者 "),t("code",[e._v("free")]),e._v(" 字段提供的值，这个字段将 page cache 考虑在内，并且不是所有的可回收 slab 内存都将被回收，因为有些可能正在被使用。这个字段取自 /proc/meminfo 中的 MemAvailable, 从内核 3.14 被引入。在 linux 2.6.27 之前，这个值等于 "),t("code",[e._v("free")]),e._v("。")])]),e._v(" "),t("p",[e._v("根据 man free 中 对 "),t("code",[e._v("available")]),e._v(" 的解释，这个值应该是要小于 "),t("code",[e._v("free")]),e._v(" + "),t("code",[e._v("buffers")]),e._v(" + "),t("code",[e._v("cache")]),e._v(" 的。")]),e._v(" "),t("h3",{attrs:{id:"buffer-vs-cache"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#buffer-vs-cache"}},[e._v("#")]),e._v(" buffer vs cache")]),e._v(" "),t("p",[e._v("在 linux 内存管理中 buffer 指的是 "),t("code",[e._v("buffer cache")]),e._v("，cache 指的是 "),t("code",[e._v("page cache")]),e._v("。简单来说，两者都使用来优化磁盘 IO 的读写速率，磁盘有逻辑（文件系统）和物理（磁盘块）两种操作。其中 "),t("code",[e._v("page cache")]),e._v(" 缓存了文件页用来优化文件 IO，而 "),t("code",[e._v("buffer cache")]),e._v(" 缓存了磁盘块用来优化块设备的 IO。")]),e._v(" "),t("p",[e._v("但实际上，大部分文件是通过文件系统呈现的，而且存储在磁盘上，这就会导致同一份文件缓存了两次，为此，在 linux 2.4 之后将两者统一了起来。如果被缓存的数据既是文件又是块数据（对文件来说，大部分数据使得，但是元数据不是），此时 "),t("code",[e._v("buffer cache")]),e._v(" 中就会存在一个指针指向 "),t("code",[e._v("page cache")]),e._v("，这样数据在内存中就只需要保留一份。所以当讨论磁盘缓存时，其实也是 "),t("code",[e._v("page cache")]),e._v("。当然 "),t("code",[e._v("buffer cache")]),e._v(" 也是存在的，因为仍然有一部分数据不是文件数据，例如 元数据，RawBlock IO 还是需要使用 "),t("code",[e._v("buffer cache")]),e._v(" 来缓存。")]),e._v(" "),t("p",[e._v("所以总结来说： "),t("code",[e._v("page cache")]),e._v(" 主要用来做文件系统上的缓存，常见的是针对文件的 "),t("code",[e._v("read()/write()")]),e._v(" 系统调用，另外也包括了 "),t("code",[e._v("mmap()")]),e._v(" 映射的块设备，也就是说，事实上 "),t("code",[e._v("page cache")]),e._v(" 负责了大部分的块设备文件的缓存工作。"),t("code",[e._v("buffer cache")]),e._v(" 缓存了系统对块设备的读写，使用 dd 命令直接操作磁盘块就会使用到 "),t("code",[e._v("buffer cache")]),e._v("。注意，块 Block 的大小由所使用块设备决定，而页在 x86 上无论是 32 位还是 64 位都是 4K 。")]),e._v(" "),t("p",[e._v("free 中的 "),t("code",[e._v("buffer")]),e._v(" 和 "),t("code",[e._v("cache")]),e._v(" 的含义：")]),e._v(" "),t("ul",[t("li",[e._v("buffers：表示块设备 (block device) 所占用的缓存页，包括了直接读写块设备以及文件系统元数据 (metadata) 比如 SuperBlock 所使用的缓存页")]),e._v(" "),t("li",[e._v("cache：表示普通文件系统中数据所占用的缓存页")])]),e._v(" "),t("p",[e._v("参考文档：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://askubuntu.com/questions/770108/what-do-the-changes-in-free-output-from-14-04-to-16-04-mean",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://askubuntu.com/questions/770108/what-do-the-changes-in-free-output-from-14-04-to-16-04-mean"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://jin-yang.github.io/post/linux-memory-buffer-vs-cache-details.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://jin-yang.github.io/post/linux-memory-buffer-vs-cache-details.html"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);