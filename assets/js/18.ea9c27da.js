(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{199:function(n,a,e){"use strict";e.r(a);var d=e(6),r=Object(d.a)({},(function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"mongodb-索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mongodb-索引"}},[n._v("#")]),n._v(" MongoDB 索引")]),n._v(" "),e("h2",{attrs:{id:"mongodb-测试表的-schema"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mongodb-测试表的-schema"}},[n._v("#")]),n._v(" MongoDB 测试表的 schema")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```js\n{\n    "index": string,\n    "accountId": string,\n    "memberId": string,\n    "cardId": string,\n}\n```\n\n```js\n// 插入测试数据\nfor (var i = 1; i <= 90000; i++) {\n    db.test.insert({ index : i , \n            name: "name"+ i , \n            accountId:"accountId" + i, \n            cardId:"cardId" + i, \n            memberId:"memberId" + i,\n        })\n}\n```\n')])])]),e("h2",{attrs:{id:"or"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#or"}},[n._v("#")]),n._v(" $or")]),n._v(" "),e("p",[n._v("官方文档中提到 "),e("a",{attrs:{href:"https://docs.mongodb.com/manual/reference/operator/query/or/#or-clauses-and-indexes",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://docs.mongodb.com/manual/reference/operator/query/or/#or-clauses-and-indexes"),e("OutboundLink")],1),n._v(" ，对于为包含 $or 的文档创建索引，应为 $or 中 每一个查询子句都创建索引。")]),n._v(" "),e("h3",{attrs:{id:"example1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example1"}},[n._v("#")]),n._v(" example1")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```js\n// query 语句\ndb.test.find(\n    {\n        "$or":[\n            {"accountId":"accountId100"},\n            {"cardId": {"$in":["cardId123","cardId456","cardId789"]}}\n        ]\n    }\n).explain().queryPlanner.winningPlan\n```\n\n测试发现，该例子中需要创建的索引为 {accountId:1} 和 {cardId:1} 两个，不可以创建一个复合索引 {accountId:1, cardId:1}\n\n```js\n// 创建 {accountId:1} 和 {cardId:1} 之后的 explain 结果如下，可以发现两个查询条件都正常命中索引\n{\n    "stage" : "SUBPLAN",\n    "inputStage" : {\n        "stage" : "FETCH",\n        "inputStage" : {\n            "stage" : "OR",\n            "inputStages" : [\n                {\n                    "stage" : "IXSCAN",\n                    "keyPattern" : {\n                        "accountId" : 1\n                    },\n                    "indexName" : "accountId_1",\n                    "isMultiKey" : false,\n                    "isUnique" : false,\n                    "isSparse" : false,\n                    "isPartial" : false,\n                    "indexVersion" : 1,\n                    "direction" : "forward",\n                    "indexBounds" : {\n                        "accountId" : [\n                            "[\\"accountId100\\", \\"accountId100\\"]"\n                        ]\n                    }\n                },\n                {\n                    "stage" : "IXSCAN",\n                    "keyPattern" : {\n                        "cardId" : 1\n                    },\n                    "indexName" : "cardId_1",\n                    "isMultiKey" : false,\n                    "isUnique" : false,\n                    "isSparse" : false,\n                    "isPartial" : false,\n                    "indexVersion" : 1,\n                    "direction" : "forward",\n                    "indexBounds" : {\n                        "cardId" : [\n                            "[\\"cardId123\\", \\"cardId123\\"]",\n                            "[\\"cardId456\\", \\"cardId456\\"]",\n                            "[\\"cardId789\\", \\"cardId789\\"]"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n\n// 使用 hint 指定 {accountId:1, cardId:1} 索引测试如下：\ndb.test.find(\n    {\n        "$or":[\n            {"accountId":"accountId100"},\n            {"cardId": {"$in":["cardId123","cardId456","cardId789"]}}\n        ]\n    }\n).hint({accountId:1, cardId:1}).explain().queryPlanner.winningPlan\n\n// 结果分析发现相当于没有索引，执行了全表扫描：\n{\n    "stage" : "FETCH",\n    "filter" : {\n        "$or" : [\n            {\n                "accountId" : {\n                    "$eq" : "accountId100"\n                }\n            },\n            {\n                "cardId" : {\n                    "$in" : [\n                        "cardId123",\n                        "cardId456",\n                        "cardId789"\n                    ]\n                }\n            }\n        ]\n    },\n    "inputStage" : {\n        "stage" : "IXSCAN",\n        "keyPattern" : {\n            "accountId" : 1,\n            "cardId" : 1\n        },\n        "indexName" : "accountId_1_cardId_1",\n        "isMultiKey" : false,\n        "isUnique" : false,\n        "isSparse" : false,\n        "isPartial" : false,\n        "indexVersion" : 1,\n        "direction" : "forward",\n        "indexBounds" : {\n            "accountId" : [\n                "[MinKey, MaxKey]"\n            ],\n            "cardId" : [\n                "[MinKey, MaxKey]"\n            ]\n        }\n    }\n}\n```\n')])])]),e("h3",{attrs:{id:"example2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example2"}},[n._v("#")]),n._v(" example2")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```js\n// 若查询条件包含 sort\ndb.test.find(\n    {\n        "$or":[\n            {"accountId":"accountId100"},\n            {"cardId": {"$in":["cardId123","cardId456","cardId789"]}}\n        ]\n    }\n).sort({"index":1}).explain().queryPlanner.winningPlan\n```\n\n表中保留 {accountId:1} 和 {cardId:1} 两个索引，测试发现，过滤阶段正常命中索引，但排序阶段是 `SORT_KEY_GENERATOR`，意味着在内存做的排序\n\n```js\n{\n    "stage" : "SUBPLAN",\n    "inputStage" : {\n        "stage" : "SORT",\n        "sortPattern" : {\n            "index" : 1\n        },\n        "inputStage" : {\n            "stage" : "SORT_KEY_GENERATOR",\n            "inputStage" : {\n                "stage" : "FETCH",\n                "inputStage" : {\n                    "stage" : "OR",\n                    "inputStages" : [\n                        {\n                            "stage" : "IXSCAN",\n                            "keyPattern" : {\n                                "accountId" : 1,\n                                "cardId" : 1\n                            },\n                            "indexName" : "accountId_1_cardId_1",\n                            "isMultiKey" : false,\n                            "isUnique" : false,\n                            "isSparse" : false,\n                            "isPartial" : false,\n                            "indexVersion" : 1,\n                            "direction" : "forward",\n                            "indexBounds" : {\n                                "accountId" : [\n                                    "[\\"accountId100\\", \\"accountId100\\"]"\n                                ],\n                                "cardId" : [\n                                    "[MinKey, MaxKey]"\n                                ]\n                            }\n                        },\n                        {\n                            "stage" : "IXSCAN",\n                            "keyPattern" : {\n                                "cardId" : 1\n                            },\n                            "indexName" : "cardId_1",\n                            "isMultiKey" : false,\n                            "isUnique" : false,\n                            "isSparse" : false,\n                            "isPartial" : false,\n                            "indexVersion" : 1,\n                            "direction" : "forward",\n                            "indexBounds" : {\n                                "cardId" : [\n                                    "[\\"cardId123\\", \\"cardId123\\"]",\n                                    "[\\"cardId456\\", \\"cardId456\\"]",\n                                    "[\\"cardId789\\", \\"cardId789\\"]"\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    }\n}\n```\n\n分别创建索引 {accountId:1,index:1} 和 {cardId:1, index:1}，重新执行 explain，结果显示，排序阶段变成了 `SORT_MERGE`， 而且在 `fetch` 之前，说明 sort 已经命中索引\n\n```js\n{\n    "stage" : "SUBPLAN",\n    "inputStage" : {\n        "stage" : "FETCH",\n        "inputStage" : {\n            "stage" : "SORT_MERGE",\n            "sortPattern" : {\n                "index" : 1\n            },\n            "inputStages" : [\n                {\n                    "stage" : "IXSCAN",\n                    "keyPattern" : {\n                        "accountId" : 1,\n                        "index" : 1\n                    },\n                    "indexName" : "accountId_1_index_1",\n                    "isMultiKey" : false,\n                    "isUnique" : false,\n                    "isSparse" : false,\n                    "isPartial" : false,\n                    "indexVersion" : 1,\n                    "direction" : "forward",\n                    "indexBounds" : {\n                        "accountId" : [\n                            "[\\"accountId100\\", \\"accountId100\\"]"\n                        ],\n                        "index" : [\n                            "[MinKey, MaxKey]"\n                        ]\n                    }\n                },\n                {\n                    "stage" : "IXSCAN",\n                    "keyPattern" : {\n                        "cardId" : 1,\n                        "index" : 1\n                    },\n                    "indexName" : "cardId_1_index_1",\n                    "isMultiKey" : false,\n                    "isUnique" : false,\n                    "isSparse" : false,\n                    "isPartial" : false,\n                    "indexVersion" : 1,\n                    "direction" : "forward",\n                    "indexBounds" : {\n                        "cardId" : [\n                            "[\\"cardId123\\", \\"cardId123\\"]"\n                        ],\n                        "index" : [\n                            "[MinKey, MaxKey]"\n                        ]\n                    }\n                },\n                {\n                    "stage" : "IXSCAN",\n                    "keyPattern" : {\n                        "cardId" : 1,\n                        "index" : 1\n                    },\n                    "indexName" : "cardId_1_index_1",\n                    "isMultiKey" : false,\n                    "isUnique" : false,\n                    "isSparse" : false,\n                    "isPartial" : false,\n                    "indexVersion" : 1,\n                    "direction" : "forward",\n                    "indexBounds" : {\n                        "cardId" : [\n                            "[\\"cardId456\\", \\"cardId456\\"]"\n                        ],\n                        "index" : [\n                            "[MinKey, MaxKey]"\n                        ]\n                    }\n                },\n                {\n                    "stage" : "IXSCAN",\n                    "keyPattern" : {\n                        "cardId" : 1,\n                        "index" : 1\n                    },\n                    "indexName" : "cardId_1_index_1",\n                    "isMultiKey" : false,\n                    "isUnique" : false,\n                    "isSparse" : false,\n                    "isPartial" : false,\n                    "indexVersion" : 1,\n                    "direction" : "forward",\n                    "indexBounds" : {\n                        "cardId" : [\n                            "[\\"cardId789\\", \\"cardId789\\"]"\n                        ],\n                        "index" : [\n                            "[MinKey, MaxKey]"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n```\n')])])]),e("h3",{attrs:{id:"example3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example3"}},[n._v("#")]),n._v(" example3")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```js\ndb.test.find(\n    {\n        "$or":[\n            {"accountId":"accountId100"},\n            {"cardId": {"$in":["cardId123","cardId456","cardId789"]}}\n        ],\n        "memberId":"memberId140"\n    }\n).sort({"index":1}).explain().queryPlanner.winningPlan\n\n```\n当不存在 {memberId:1,index:1} 时，查询可以命中 {accountId:1,index:1} 和 {cardId:1,index:1} ，但是仅仅命中了过滤条件，没有命中排序。\n\n{memberId:1,index:1} 命中了外层的过滤条件和排序。\n\n{accountId:1,memberId:1,index:1} 和 {cardId:1,memberId,index:1} 无法命中\n\n```js\n// {accountId:1,index:1} 和 {cardId:1,index:1},\n{\n    "stage" : "SORT",\n    "sortPattern" : {\n        "index" : 1\n    },\n    "inputStage" : {\n        "stage" : "SORT_KEY_GENERATOR",\n        "inputStage" : {\n            "stage" : "FETCH",\n            "filter" : {\n                "memberId" : {\n                    "$eq" : "memberId140"\n                }\n            },\n            "inputStage" : {\n                "stage" : "OR",\n                "inputStages" : [\n                    {\n                        "stage" : "IXSCAN",\n                        "keyPattern" : {\n                            "cardId" : 1,\n                            "index" : 1\n                        },\n                        "indexName" : "cardId_1_index_1",\n                        "isMultiKey" : false,\n                        "isUnique" : false,\n                        "isSparse" : false,\n                        "isPartial" : false,\n                        "indexVersion" : 1,\n                        "direction" : "forward",\n                        "indexBounds" : {\n                            "cardId" : [\n                                "[\\"cardId123\\", \\"cardId123\\"]",\n                                "[\\"cardId456\\", \\"cardId456\\"]",\n                                "[\\"cardId789\\", \\"cardId789\\"]"\n                            ],\n                            "index" : [\n                                "[MinKey, MaxKey]"\n                            ]\n                        }\n                    },\n                    {\n                        "stage" : "IXSCAN",\n                        "keyPattern" : {\n                            "accountId" : 1,\n                            "index" : 1\n                        },\n                        "indexName" : "accountId_1_index_1",\n                        "isMultiKey" : false,\n                        "isUnique" : false,\n                        "isSparse" : false,\n                        "isPartial" : false,\n                        "indexVersion" : 1,\n                        "direction" : "forward",\n                        "indexBounds" : {\n                            "accountId" : [\n                                "[\\"accountId100\\", \\"accountId100\\"]"\n                            ],\n                            "index" : [\n                                "[MinKey, MaxKey]"\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n\n//  {memberId:1,index:1}\n{\n    "stage" : "FETCH",\n    "filter" : {\n        "$or" : [\n            {\n                "accountId" : {\n                    "$eq" : "accountId100"\n                }\n            },\n            {\n                "cardId" : {\n                    "$in" : [\n                        "cardId123",\n                        "cardId456",\n                        "cardId789"\n                    ]\n                }\n            }\n        ]\n    },\n    "inputStage" : {\n        "stage" : "IXSCAN",\n        "keyPattern" : {\n            "memberId" : 1,\n            "index" : 1\n        },\n        "indexName" : "memberId_1_index_1",\n        "isMultiKey" : false,\n        "isUnique" : false,\n        "isSparse" : false,\n        "isPartial" : false,\n        "indexVersion" : 1,\n        "direction" : "forward",\n        "indexBounds" : {\n            "memberId" : [\n                "[\\"memberId140\\", \\"memberId140\\"]"\n            ],\n            "index" : [\n                "[MinKey, MaxKey]"\n            ]\n        }\n    }\n}\n```\n')])])]),e("h2",{attrs:{id:"and"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#and"}},[n._v("#")]),n._v(" $and")]),n._v(" "),e("p",[n._v("$and 的索引执行情况没有文档介绍，下面是一些实际测试结果")]),n._v(" "),e("h3",{attrs:{id:"example1-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example1-2"}},[n._v("#")]),n._v(" example1")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```js\ndb.test.find(\n    {\n        "$and":[\n            {"accountId":"accountId100"},\n            {"cardId": {"$in":["cardId100","cardId456","cardId789"]}}\n        ]\n    }\n).explain().queryPlanner.winningPlan\n\n```\n\n创建 {accountId:1,cardId:1} 索引后再次执行上述命令，发现两个字段都命中了索引\n\n```js\n{\n    "stage" : "FETCH",\n    "inputStage" : {\n        "stage" : "IXSCAN",\n        "keyPattern" : {\n            "accountId" : 1,\n            "cardId" : 1\n        },\n        "indexName" : "accountId_1_cardId_1",\n        "isMultiKey" : false,\n        "isUnique" : false,\n        "isSparse" : false,\n        "isPartial" : false,\n        "indexVersion" : 1,\n        "direction" : "forward",\n        "indexBounds" : {\n            "accountId" : [\n                "[\\"accountId100\\", \\"accountId100\\"]"\n            ],\n            "cardId" : [\n                "[\\"cardId100\\", \\"cardId100\\"]",\n                "[\\"cardId456\\", \\"cardId456\\"]",\n                "[\\"cardId789\\", \\"cardId789\\"]"\n            ]\n        }\n    }\n}\n```\n')])])]),e("h3",{attrs:{id:"example2-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example2-2"}},[n._v("#")]),n._v(" example2")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```js\n// 若查询条件包含 sort\ndb.test.find(\n    {\n        "$and":[\n            {"accountId":"accountId100"},\n            {"cardId": {"$in":["cardId100","cardId456","cardId789"]}}\n        ]\n    }\n).sort({index:1}).explain().queryPlanner.winningPlan\n```\n\n创建 {accountId:1,cardId:1,index:1}，发现全部命中索引：\n\n```js\n{\n    "stage" : "FETCH",\n    "inputStage" : {\n        "stage" : "SORT_MERGE",\n        "sortPattern" : {\n            "index" : 1\n        },\n        "inputStages" : [\n            {\n                "stage" : "IXSCAN",\n                "keyPattern" : {\n                    "accountId" : 1,\n                    "cardId" : 1,\n                    "index" : 1\n                },\n                "indexName" : "accountId_1_cardId_1_index_1",\n                "isMultiKey" : false,\n                "isUnique" : false,\n                "isSparse" : false,\n                "isPartial" : false,\n                "indexVersion" : 1,\n                "direction" : "forward",\n                "indexBounds" : {\n                    "accountId" : [\n                        "[\\"accountId100\\", \\"accountId100\\"]"\n                    ],\n                    "cardId" : [\n                        "[\\"cardId100\\", \\"cardId100\\"]"\n                    ],\n                    "index" : [\n                        "[MinKey, MaxKey]"\n                    ]\n                }\n            },\n            {\n                "stage" : "IXSCAN",\n                "keyPattern" : {\n                    "accountId" : 1,\n                    "cardId" : 1,\n                    "index" : 1\n                },\n                "indexName" : "accountId_1_cardId_1_index_1",\n                "isMultiKey" : false,\n                "isUnique" : false,\n                "isSparse" : false,\n                "isPartial" : false,\n                "indexVersion" : 1,\n                "direction" : "forward",\n                "indexBounds" : {\n                    "accountId" : [\n                        "[\\"accountId100\\", \\"accountId100\\"]"\n                    ],\n                    "cardId" : [\n                        "[\\"cardId456\\", \\"cardId456\\"]"\n                    ],\n                    "index" : [\n                        "[MinKey, MaxKey]"\n                    ]\n                }\n            },\n            {\n                "stage" : "IXSCAN",\n                "keyPattern" : {\n                    "accountId" : 1,\n                    "cardId" : 1,\n                    "index" : 1\n                },\n                "indexName" : "accountId_1_cardId_1_index_1",\n                "isMultiKey" : false,\n                "isUnique" : false,\n                "isSparse" : false,\n                "isPartial" : false,\n                "indexVersion" : 1,\n                "direction" : "forward",\n                "indexBounds" : {\n                    "accountId" : [\n                        "[\\"accountId100\\", \\"accountId100\\"]"\n                    ],\n                    "cardId" : [\n                        "[\\"cardId789\\", \\"cardId789\\"]"\n                    ],\n                    "index" : [\n                        "[MinKey, MaxKey]"\n                    ]\n                }\n            }\n        ]\n    }\n}\n```\n')])])]),e("h3",{attrs:{id:"example3-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example3-2"}},[n._v("#")]),n._v(" example3")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```js\n// 若查询条件不只包含 $and\ndb.test.find(\n    {\n        "$and":[\n            {"accountId":"accountId100"},\n            {"cardId": {"$in":["cardId100","cardId456","cardId789"]}}\n        ],\n        "memberId": "memberId100"\n    }\n).sort({index:1}).explain().queryPlanner.winningPlan\n```\n\n创建索引 {accountId:1,cardId:1,memberId:1,index:1}, 测试发现成功命中\n\n```js\n{\n    "stage" : "FETCH",\n    "inputStage" : {\n        "stage" : "SORT_MERGE",\n        "sortPattern" : {\n            "index" : 1\n        },\n        "inputStages" : [\n            {\n                "stage" : "IXSCAN",\n                "keyPattern" : {\n                    "accountId" : 1,\n                    "cardId" : 1,\n                    "memberId" : 1,\n                    "index" : 1\n                },\n                "indexName" : "accountId_1_cardId_1_memberId_1_index_1",\n                "isMultiKey" : false,\n                "isUnique" : false,\n                "isSparse" : false,\n                "isPartial" : false,\n                "indexVersion" : 1,\n                "direction" : "forward",\n                "indexBounds" : {\n                    "accountId" : [\n                        "[\\"accountId100\\", \\"accountId100\\"]"\n                    ],\n                    "cardId" : [\n                        "[\\"cardId100\\", \\"cardId100\\"]"\n                    ],\n                    "memberId" : [\n                        "[\\"memberId100\\", \\"memberId100\\"]"\n                    ],\n                    "index" : [\n                        "[MinKey, MaxKey]"\n                    ]\n                }\n            },\n            {\n                "stage" : "IXSCAN",\n                "keyPattern" : {\n                    "accountId" : 1,\n                    "cardId" : 1,\n                    "memberId" : 1,\n                    "index" : 1\n                },\n                "indexName" : "accountId_1_cardId_1_memberId_1_index_1",\n                "isMultiKey" : false,\n                "isUnique" : false,\n                "isSparse" : false,\n                "isPartial" : false,\n                "indexVersion" : 1,\n                "direction" : "forward",\n                "indexBounds" : {\n                    "accountId" : [\n                        "[\\"accountId100\\", \\"accountId100\\"]"\n                    ],\n                    "cardId" : [\n                        "[\\"cardId456\\", \\"cardId456\\"]"\n                    ],\n                    "memberId" : [\n                        "[\\"memberId100\\", \\"memberId100\\"]"\n                    ],\n                    "index" : [\n                        "[MinKey, MaxKey]"\n                    ]\n                }\n            },\n            {\n                "stage" : "IXSCAN",\n                "keyPattern" : {\n                    "accountId" : 1,\n                    "cardId" : 1,\n                    "memberId" : 1,\n                    "index" : 1\n                },\n                "indexName" : "accountId_1_cardId_1_memberId_1_index_1",\n                "isMultiKey" : false,\n                "isUnique" : false,\n                "isSparse" : false,\n                "isPartial" : false,\n                "indexVersion" : 1,\n                "direction" : "forward",\n                "indexBounds" : {\n                    "accountId" : [\n                        "[\\"accountId100\\", \\"accountId100\\"]"\n                    ],\n                    "cardId" : [\n                        "[\\"cardId789\\", \\"cardId789\\"]"\n                    ],\n                    "memberId" : [\n                        "[\\"memberId100\\", \\"memberId100\\"]"\n                    ],\n                    "index" : [\n                        "[MinKey, MaxKey]"\n                    ]\n                }\n            }\n        ]\n    }\n}\n```\n')])])]),e("h2",{attrs:{id:"and-和-or-嵌套查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#and-和-or-嵌套查询"}},[n._v("#")]),n._v(" $and 和 $or 嵌套查询")]),n._v(" "),e("h3",{attrs:{id:"or-中包含-or"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#or-中包含-or"}},[n._v("#")]),n._v(" $or 中包含 $or")]),n._v(" "),e("h4",{attrs:{id:"example1-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example1-3"}},[n._v("#")]),n._v(" example1")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```js\ndb.test.find(\n    {\n        "$or":[\n            {\n                "$or":[\n                    {"accountId":"accountId100"},\n                    {"cardId": {"$in":["cardId100","cardId456","cardId789"]}}\n                ]\n            }\n        ]\n    }\n).explain().queryPlanner.winningPlan\n```\n\n依旧可以命中 {accountdId:1} 和 {cardId:1}\n\n```js\n{\n    "stage" : "SUBPLAN",\n    "inputStage" : {\n        "stage" : "FETCH",\n        "inputStage" : {\n            "stage" : "OR",\n            "inputStages" : [\n                {\n                    "stage" : "IXSCAN",\n                    "keyPattern" : {\n                        "cardId" : 1\n                    },\n                    "indexName" : "cardId_1",\n                    "isMultiKey" : false,\n                    "isUnique" : false,\n                    "isSparse" : false,\n                    "isPartial" : false,\n                    "indexVersion" : 1,\n                    "direction" : "forward",\n                    "indexBounds" : {\n                        "cardId" : [\n                            "[\\"cardId100\\", \\"cardId100\\"]",\n                            "[\\"cardId456\\", \\"cardId456\\"]",\n                            "[\\"cardId789\\", \\"cardId789\\"]"\n                        ]\n                    }\n                },\n                {\n                    "stage" : "IXSCAN",\n                    "keyPattern" : {\n                        "accountId" : 1\n                    },\n                    "indexName" : "accountId_1",\n                    "isMultiKey" : false,\n                    "isUnique" : false,\n                    "isSparse" : false,\n                    "isPartial" : false,\n                    "indexVersion" : 1,\n                    "direction" : "forward",\n                    "indexBounds" : {\n                        "accountId" : [\n                            "[\\"accountId100\\", \\"accountId100\\"]"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n```\n')])])]),e("h4",{attrs:{id:"example2-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example2-3"}},[n._v("#")]),n._v(" example2")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```js\n// 相比上一个查询条件，多了 {"memberId":"memberId101"}\ndb.test.find(\n    {\n        "$or":[\n            {\n                "$or":[\n                    {"accountId":"accountId100"},\n                    {"cardId": {"$in":["cardId100","cardId456","cardId789"]}}\n                ]\n            },\n            {\n                "memberId":"memberId101"\n            }\n        ]\n    }\n).explain().queryPlanner.winningPlan\n```\n\n必须这三个索引都存在时才能命中索引，{accountId:1} {cardId：1} 和 {memberId:1} ，所以上面这种写法其实和一个 `$or` 中包含 3 个查询条件没有区别\n\n```js\n{\n    "stage" : "SUBPLAN",\n    "inputStage" : {\n        "stage" : "FETCH",\n        "inputStage" : {\n            "stage" : "OR",\n            "inputStages" : [\n                {\n                    "stage" : "IXSCAN",\n                    "keyPattern" : {\n                        "cardId" : 1\n                    },\n                    "indexName" : "cardId_1",\n                    "isMultiKey" : false,\n                    "isUnique" : false,\n                    "isSparse" : false,\n                    "isPartial" : false,\n                    "indexVersion" : 1,\n                    "direction" : "forward",\n                    "indexBounds" : {\n                        "cardId" : [\n                            "[\\"cardId100\\", \\"cardId100\\"]",\n                            "[\\"cardId456\\", \\"cardId456\\"]",\n                            "[\\"cardId789\\", \\"cardId789\\"]"\n                        ]\n                    }\n                },\n                {\n                    "stage" : "IXSCAN",\n                    "keyPattern" : {\n                        "accountId" : 1\n                    },\n                    "indexName" : "accountId_1",\n                    "isMultiKey" : false,\n                    "isUnique" : false,\n                    "isSparse" : false,\n                    "isPartial" : false,\n                    "indexVersion" : 1,\n                    "direction" : "forward",\n                    "indexBounds" : {\n                        "accountId" : [\n                            "[\\"accountId100\\", \\"accountId100\\"]"\n                        ]\n                    }\n                },\n                {\n                    "stage" : "IXSCAN",\n                    "keyPattern" : {\n                        "memberId" : 1\n                    },\n                    "indexName" : "memberId_1",\n                    "isMultiKey" : false,\n                    "isUnique" : false,\n                    "isSparse" : false,\n                    "isPartial" : false,\n                    "indexVersion" : 1,\n                    "direction" : "forward",\n                    "indexBounds" : {\n                        "memberId" : [\n                            "[\\"memberId101\\", \\"memberId101\\"]"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n```\n')])])]),e("h3",{attrs:{id:"or-中包含-and"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#or-中包含-and"}},[n._v("#")]),n._v(" $or 中包含 $and")]),n._v(" "),e("h4",{attrs:{id:"example1-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example1-4"}},[n._v("#")]),n._v(" example1")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```js\ndb.test.find(\n    {\n        "$or":[\n            {\n                "$and":[\n                    {"accountId":"accountId100"},\n                    {"cardId": {"$in":["cardId100","cardId456","cardId789"]}}\n                ]\n            }\n        ]\n    }\n).sort({index:1}).explain().queryPlanner.winningPlan\n```\n可以命中 {accountId:1,cardId:1,index:1}\n')])])]),e("h4",{attrs:{id:"example2-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example2-4"}},[n._v("#")]),n._v(" example2")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```js\ndb.test.find(\n    {\n        "$or":[\n            {\n                "$and":[\n                    {"accountId":"accountId100"},\n                    {"cardId": {"$in":["cardId100","cardId456","cardId789"]}}\n                ]\n            },\n            {\n                "memberId":"memberId140"\n            }\n        ]\n    }\n).sort({index:1}).explain().queryPlanner.winningPlan\n```\n最合适的索引应该为 {accountId:1,cardId:1,index:1} 和 {member:1,index:1},所有字段均可命中\n\n```js\n{\n    "stage" : "SUBPLAN",\n    "inputStage" : {\n        "stage" : "FETCH",\n        "inputStage" : {\n            "stage" : "SORT_MERGE",\n            "sortPattern" : {\n                "index" : 1\n            },\n            "inputStages" : [\n                {\n                    "stage" : "IXSCAN",\n                    "keyPattern" : {\n                        "accountId" : 1,\n                        "cardId" : 1,\n                        "index" : 1\n                    },\n                    "indexName" : "accountId_1_cardId_1_index_1",\n                    "isMultiKey" : false,\n                    "isUnique" : false,\n                    "isSparse" : false,\n                    "isPartial" : false,\n                    "indexVersion" : 1,\n                    "direction" : "forward",\n                    "indexBounds" : {\n                        "accountId" : [\n                            "[\\"accountId100\\", \\"accountId100\\"]"\n                        ],\n                        "cardId" : [\n                            "[\\"cardId100\\", \\"cardId100\\"]"\n                        ],\n                        "index" : [\n                            "[MinKey, MaxKey]"\n                        ]\n                    }\n                },\n                {\n                    "stage" : "IXSCAN",\n                    "keyPattern" : {\n                        "accountId" : 1,\n                        "cardId" : 1,\n                        "index" : 1\n                    },\n                    "indexName" : "accountId_1_cardId_1_index_1",\n                    "isMultiKey" : false,\n                    "isUnique" : false,\n                    "isSparse" : false,\n                    "isPartial" : false,\n                    "indexVersion" : 1,\n                    "direction" : "forward",\n                    "indexBounds" : {\n                        "accountId" : [\n                            "[\\"accountId100\\", \\"accountId100\\"]"\n                        ],\n                        "cardId" : [\n                            "[\\"cardId456\\", \\"cardId456\\"]"\n                        ],\n                        "index" : [\n                            "[MinKey, MaxKey]"\n                        ]\n                    }\n                },\n                {\n                    "stage" : "IXSCAN",\n                    "keyPattern" : {\n                        "accountId" : 1,\n                        "cardId" : 1,\n                        "index" : 1\n                    },\n                    "indexName" : "accountId_1_cardId_1_index_1",\n                    "isMultiKey" : false,\n                    "isUnique" : false,\n                    "isSparse" : false,\n                    "isPartial" : false,\n                    "indexVersion" : 1,\n                    "direction" : "forward",\n                    "indexBounds" : {\n                        "accountId" : [\n                            "[\\"accountId100\\", \\"accountId100\\"]"\n                        ],\n                        "cardId" : [\n                            "[\\"cardId789\\", \\"cardId789\\"]"\n                        ],\n                        "index" : [\n                            "[MinKey, MaxKey]"\n                        ]\n                    }\n                },\n                {\n                    "stage" : "IXSCAN",\n                    "keyPattern" : {\n                        "memberId" : 1,\n                        "index" : 1\n                    },\n                    "indexName" : "memberId_1_index_1",\n                    "isMultiKey" : false,\n                    "isUnique" : false,\n                    "isSparse" : false,\n                    "isPartial" : false,\n                    "indexVersion" : 1,\n                    "direction" : "forward",\n                    "indexBounds" : {\n                        "memberId" : [\n                            "[\\"memberId140\\", \\"memberId140\\"]"\n                        ],\n                        "index" : [\n                            "[MinKey, MaxKey]"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n\n```\n')])])]),e("h3",{attrs:{id:"and-中包含-and"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#and-中包含-and"}},[n._v("#")]),n._v(" $and 中包含 $and")]),n._v(" "),e("h4",{attrs:{id:"example1-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example1-5"}},[n._v("#")]),n._v(" example1")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```js\ndb.test.find(\n    {\n        "$and":[\n            {\n                "$and":[\n                    {"accountId":"accountId100"},\n                    {"cardId": {"$in":["cardId100","cardId456","cardId789"]}}\n                ]\n            }\n        ]\n    }\n).hint({accountId:1,cardId:1}).explain().queryPlanner.winningPlan\n```\n\n使用 hint() 指定 {accountId:1,cardId:1} 发现可以命中该索引，使用 hint 的原因是默认选择了 {accountId:1},默认行为的原因应该是因为 accountId 已经把文档过滤的只剩下一条了，不需要第 2 个字段的索引\n\n```js\n{\n    "stage" : "FETCH",\n    "inputStage" : {\n        "stage" : "IXSCAN",\n        "keyPattern" : {\n            "accountId" : 1,\n            "cardId" : 1\n        },\n        "indexName" : "accountId_1_cardId_1",\n        "isMultiKey" : false,\n        "isUnique" : false,\n        "isSparse" : false,\n        "isPartial" : false,\n        "indexVersion" : 1,\n        "direction" : "forward",\n        "indexBounds" : {\n            "accountId" : [\n                "[\\"accountId100\\", \\"accountId100\\"]"\n            ],\n            "cardId" : [\n                "[\\"cardId100\\", \\"cardId100\\"]",\n                "[\\"cardId456\\", \\"cardId456\\"]",\n                "[\\"cardId789\\", \\"cardId789\\"]"\n            ]\n        }\n    }\n}\n```\n')])])]),e("h4",{attrs:{id:"example2-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example2-5"}},[n._v("#")]),n._v(" example2")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```js\ndb.test.find(\n    {\n        "$and":[\n            {\n                "$and":[\n                    {"accountId":"accountId100"},\n                    {"cardId": {"$in":["cardId100","cardId456","cardId789"]}}\n                ]\n            },\n            {\n                "memberId":"memberId100"\n            }\n        ]\n    }\n).hint({accountId:1,cardId:1,memberId:1}).explain().queryPlanner.winningPlan\n```\n\n{accountId:1,cardId:1,memberId:1} 索引可以完全命中，行为与 一个 $and 中包含 3 个查询条件的查询完全一致 \n\n```js\n{\n    "stage" : "FETCH",\n    "inputStage" : {\n        "stage" : "IXSCAN",\n        "keyPattern" : {\n            "accountId" : 1,\n            "cardId" : 1,\n            "memberId" : 1\n        },\n        "indexName" : "accountId_1_cardId_1_memberId_1",\n        "isMultiKey" : false,\n        "isUnique" : false,\n        "isSparse" : false,\n        "isPartial" : false,\n        "indexVersion" : 1,\n        "direction" : "forward",\n        "indexBounds" : {\n            "accountId" : [\n                "[\\"accountId100\\", \\"accountId100\\"]"\n            ],\n            "cardId" : [\n                "[\\"cardId100\\", \\"cardId100\\"]",\n                "[\\"cardId456\\", \\"cardId456\\"]",\n                "[\\"cardId789\\", \\"cardId789\\"]"\n            ],\n            "memberId" : [\n                "[\\"memberId100\\", \\"memberId100\\"]"\n            ]\n        }\n    }\n}\n\n```\n')])])]),e("h3",{attrs:{id:"and-中包含-or"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#and-中包含-or"}},[n._v("#")]),n._v(" $and 中包含 $or")]),n._v(" "),e("h4",{attrs:{id:"example1-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example1-6"}},[n._v("#")]),n._v(" example1")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```js\ndb.test.find(\n    {\n        "$and":[\n            {\n                "$or":[\n                    {"accountId":"accountId100"},\n                    {"cardId": {"$in":["cardId100","cardId456","cardId789"]}}\n                ]\n            },\n            {\n                "memberId":"memberId100"\n            }\n        ]\n    }\n).sort({index:1}).explain().queryPlanner.winningPlan\n```\n行为与 $or 中的 example3 是一样的\n可以命中 {memberId:1,index:1} 也可以命中 {accountId:1,cardId:1}\n无法命中 {accountId:1,memberId:1,index:1} 或者 {cardId:1,memberId:1,index:1}\n')])])]),e("h4",{attrs:{id:"example2-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example2-6"}},[n._v("#")]),n._v(" example2")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```js\ndb.test.find(\n    {\n        "$and":[\n            {\n                "$or":[\n                    {"accountId":"accountId100"},\n                    {"cardId": {"$in":["cardId100","cardId456","cardId789"]}}\n                ]\n            },\n            {\n                "$or":[\n                    {"memberId":"memberId100"},\n                ]\n            }\n        ]\n    }\n).sort({index:1}).explain().queryPlanner.winningPlan\n```\n\n行为与 example1 是一样的\n可以命中 {accountId:1} 和 {cardId:1} 和 {memberId:1}\n')])])]),e("h4",{attrs:{id:"example3-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example3-3"}},[n._v("#")]),n._v(" example3")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```js\ndb.test.find(\n    {\n        "$and":[\n            {\n                "$or":[\n                    {"accountId":"accountId100"},\n                    {"cardId": {"$in":["cardId100","cardId456","cardId789"]}}\n                ]\n            },\n            {\n                "memberId":"memberId100"\n            }\n        ],\n        "name": "name100"\n    }\n).sort({index:1}).explain().queryPlanner.winningPlan\n```\n\n可以命中 {memberId:1,name:1,index:1}\n')])])]),e("h2",{attrs:{id:"结论"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[n._v("#")]),n._v(" 结论")]),n._v(" "),e("ul",[e("li",[n._v("对于包含 $or 和 $and 的索引，创建方式为：\n"),e("ul",[e("li",[n._v("只包含 $or ，则拆分查询子句，分别为每个子句创建索引")]),n._v(" "),e("li",[n._v("只包含 $and，则将查询子句以及和 $and 并列的查询字段合并起来建一个索引")]),n._v(" "),e("li",[n._v("若 $and 嵌套 $or , $or 部分遵循 $or 的逻辑，剩余字段合起来建一个索引")]),n._v(" "),e("li",[n._v("若 sort 存在，为每个索引都拼接上 sort 的字段")])])])])])}),[],!1,null,null,null);a.default=r.exports}}]);